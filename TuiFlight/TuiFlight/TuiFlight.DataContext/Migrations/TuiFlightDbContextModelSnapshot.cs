// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TuiFlightDataContext;

namespace TuiFlightDataContext.Migrations
{
    [DbContext(typeof(TuiFlightDbContext))]
    partial class TuiFlightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TuiFlightModel.Models.Airline", b =>
                {
                    b.Property<Guid>("AirlineId");

                    b.Property<string>("Name");

                    b.HasKey("AirlineId");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("TuiFlightModel.Models.Airport", b =>
                {
                    b.Property<Guid>("AirportId");

                    b.Property<Guid>("CityId");

                    b.Property<string>("CountryCode");

                    b.Property<string>("Iata");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.HasKey("AirportId");

                    b.HasIndex("CityId");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("TuiFlightModel.Models.City", b =>
                {
                    b.Property<Guid>("CityId");

                    b.Property<Guid>("CountryId");

                    b.Property<string>("Name");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TuiFlightModel.Models.Country", b =>
                {
                    b.Property<Guid>("CountryId");

                    b.Property<string>("Code");

                    b.Property<string>("Name");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TuiFlightModel.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerId");

                    b.Property<Guid>("CityId");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("CustomerId");

                    b.HasIndex("CityId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TuiFlightModel.Models.Flight", b =>
                {
                    b.Property<Guid>("FlightId");

                    b.Property<Guid>("AirlineId");

                    b.Property<Guid>("DepAirportId");

                    b.Property<Guid>("DesAirportId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OutboundDate");

                    b.HasKey("FlightId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("DepAirportId");

                    b.HasIndex("DesAirportId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("TuiFlightModel.Models.Travel", b =>
                {
                    b.Property<Guid>("OutboundFlightId");

                    b.Property<Guid>("CustomerId");

                    b.Property<DateTime>("OutboundDate");

                    b.Property<bool>("OneWay");

                    b.Property<DateTime?>("ReturnDate");

                    b.Property<Guid?>("ReturnFlightId");

                    b.HasKey("OutboundFlightId", "CustomerId", "OutboundDate");

                    b.HasIndex("CustomerId");

                    b.ToTable("Travels");
                });

            modelBuilder.Entity("TuiFlightModel.Models.Airport", b =>
                {
                    b.HasOne("TuiFlightModel.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TuiFlightModel.Models.City", b =>
                {
                    b.HasOne("TuiFlightModel.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TuiFlightModel.Models.Customer", b =>
                {
                    b.HasOne("TuiFlightModel.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TuiFlightModel.Models.Flight", b =>
                {
                    b.HasOne("TuiFlightModel.Models.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TuiFlightModel.Models.Airport", "DepartureAirport")
                        .WithMany("FlightsFrom")
                        .HasForeignKey("DepAirportId")
                        .HasConstraintName("FK_Flight_Airport_From")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TuiFlightModel.Models.Airport", "DestinationAirport")
                        .WithMany("FlightsOnArrival")
                        .HasForeignKey("DesAirportId")
                        .HasConstraintName("FK_Airport_Flight_To")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TuiFlightModel.Models.Travel", b =>
                {
                    b.HasOne("TuiFlightModel.Models.Customer", "Traveller")
                        .WithMany("Travels")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Travel_Customer")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
